/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module input_mode_3 (
    input clk,
    input rst,
    input [15:0] iodip,
    input [3:0] io_button,
    output reg [2:0] zvn,
    output reg [15:0] out
  );
  
  
  
  wire [16-1:0] M_aluUnit_out;
  wire [1-1:0] M_aluUnit_z;
  wire [1-1:0] M_aluUnit_v;
  wire [1-1:0] M_aluUnit_n;
  reg [16-1:0] M_aluUnit_a;
  reg [16-1:0] M_aluUnit_b;
  reg [6-1:0] M_aluUnit_alufn;
  alu_8 aluUnit (
    .a(M_aluUnit_a),
    .b(M_aluUnit_b),
    .alufn(M_aluUnit_alufn),
    .out(M_aluUnit_out),
    .z(M_aluUnit_z),
    .v(M_aluUnit_v),
    .n(M_aluUnit_n)
  );
  
  reg [15:0] M_astore_d, M_astore_q = 1'h0;
  
  reg [15:0] M_bstore_d, M_bstore_q = 1'h0;
  
  reg [5:0] M_alufnstore_d, M_alufnstore_q = 1'h0;
  
  reg [15:0] M_outstore_d, M_outstore_q = 1'h0;
  
  reg [2:0] M_zvnstore_d, M_zvnstore_q = 1'h0;
  
  always @* begin
    M_astore_d = M_astore_q;
    M_zvnstore_d = M_zvnstore_q;
    M_bstore_d = M_bstore_q;
    M_outstore_d = M_outstore_q;
    
    M_aluUnit_a = M_astore_q;
    M_aluUnit_b = M_bstore_q;
    M_aluUnit_alufn = M_alufnstore_q;
    if (io_button[0+0-:1]) begin
      M_astore_d = iodip;
      M_outstore_d = iodip;
    end
    if (io_button[1+0-:1]) begin
      M_bstore_d = iodip;
      M_outstore_d = iodip;
    end
    if (io_button[2+0-:1]) begin
      M_aluUnit_alufn = iodip[0+5-:6];
      M_outstore_d = iodip;
    end
    if (io_button[3+0-:1]) begin
      M_outstore_d = M_aluUnit_out;
      M_zvnstore_d = M_aluUnit_z;
    end
    zvn = M_zvnstore_q;
    out = M_outstore_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_astore_q <= 1'h0;
    end else begin
      M_astore_q <= M_astore_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_alufnstore_q <= 1'h0;
    end else begin
      M_alufnstore_q <= M_alufnstore_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_outstore_q <= 1'h0;
    end else begin
      M_outstore_q <= M_outstore_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_bstore_q <= 1'h0;
    end else begin
      M_bstore_q <= M_bstore_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_zvnstore_q <= 1'h0;
    end else begin
      M_zvnstore_q <= M_zvnstore_d;
    end
  end
  
endmodule
