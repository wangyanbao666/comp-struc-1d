/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_combine_1 (
    input clk,
    input rst,
    input [4:0] iobutton,
    input [15:0] iodip,
    output reg [7:0] seg,
    output reg [3:0] sel,
    output reg [15:0] out
  );
  
  
  
  wire [3-1:0] M_inmode_zvn;
  wire [16-1:0] M_inmode_out;
  reg [16-1:0] M_inmode_iodip;
  reg [4-1:0] M_inmode_io_button;
  input_mode_3 inmode (
    .clk(clk),
    .rst(rst),
    .iodip(M_inmode_iodip),
    .io_button(M_inmode_io_button),
    .zvn(M_inmode_zvn),
    .out(M_inmode_out)
  );
  
  wire [4-1:0] M_fsmt_seg;
  wire [3-1:0] M_fsmt_zvn_out;
  wire [16-1:0] M_fsmt_out_true;
  wire [16-1:0] M_fsmt_out_calc;
  reg [1-1:0] M_fsmt_iodip;
  fsm_test_4 fsmt (
    .clk(clk),
    .rst(rst),
    .iodip(M_fsmt_iodip),
    .seg(M_fsmt_seg),
    .zvn_out(M_fsmt_zvn_out),
    .out_true(M_fsmt_out_true),
    .out_calc(M_fsmt_out_calc)
  );
  
  
  localparam S0_changemode = 2'd0;
  localparam S1_changemode = 2'd1;
  localparam S2_changemode = 2'd2;
  localparam S3_changemode = 2'd3;
  
  reg [1:0] M_changemode_d, M_changemode_q = S0_changemode;
  
  wire [(3'h5+0)-1:0] M_buttoncond_out;
  reg [(3'h5+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h5;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_5 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h5+0)-1:0] M_buttondetector_out;
  reg [(3'h5+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h5;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_6 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [7-1:0] M_mss_seg;
  wire [4-1:0] M_mss_sel;
  reg [16-1:0] M_mss_values;
  multi_seven_seg_7 mss (
    .clk(clk),
    .rst(rst),
    .values(M_mss_values),
    .seg(M_mss_seg),
    .sel(M_mss_sel)
  );
  
  wire [16-1:0] M_count_out;
  reg [1-1:0] M_count_dip;
  time_countdown_8 count (
    .clk(clk),
    .rst(rst),
    .dip(M_count_dip),
    .out(M_count_out)
  );
  
  wire [4-1:0] M_randchoose_out;
  reg [1-1:0] M_randchoose_button;
  random_choose_9 randchoose (
    .clk(clk),
    .rst(rst),
    .button(M_randchoose_button),
    .out(M_randchoose_out)
  );
  
  reg [4:0] button;
  
  reg [3:0] z;
  
  reg [3:0] v;
  
  reg [3:0] n;
  
  reg [3:0] s;
  
  always @* begin
    M_changemode_d = M_changemode_q;
    
    M_buttoncond_in = iobutton;
    M_buttondetector_in = M_buttoncond_out;
    button = M_buttondetector_out;
    M_inmode_io_button = button[0+3-:4];
    out = 16'h0000;
    s = 4'h0;
    M_inmode_iodip = iodip;
    M_fsmt_iodip = iodip[0+0-:1];
    M_count_dip = iodip[0+0-:1];
    M_randchoose_button = button[0+0-:1];
    
    case (M_changemode_q)
      S0_changemode: begin
        out = M_inmode_out;
        z = M_inmode_zvn[2+0-:1];
        v = M_inmode_zvn[1+0-:1];
        n = M_inmode_zvn[0+0-:1];
        M_mss_values = {z, v, n, s};
        seg = ~M_mss_seg;
        sel = ~M_mss_sel;
        if (button[4+0-:1]) begin
          M_changemode_d = S1_changemode;
        end
      end
      S1_changemode: begin
        out = M_fsmt_out_calc;
        s = M_fsmt_seg;
        z = M_fsmt_zvn_out[2+0-:1];
        v = M_fsmt_zvn_out[1+0-:1];
        n = M_fsmt_zvn_out[0+0-:1];
        M_mss_values = {z, v, n, s};
        seg = ~M_mss_seg;
        sel = ~M_mss_sel;
        if (button[4+0-:1]) begin
          M_changemode_d = S2_changemode;
        end
      end
      S2_changemode: begin
        M_mss_values = M_count_out;
        seg = ~M_mss_seg;
        sel = ~M_mss_sel;
        sel[3+0-:1] = 1'h1;
        if (button[4+0-:1]) begin
          M_changemode_d = S3_changemode;
        end
      end
      S3_changemode: begin
        out[0+3-:4] = M_randchoose_out;
        M_mss_values = {M_randchoose_out, M_randchoose_out, M_randchoose_out, M_randchoose_out};
        seg = ~M_mss_seg;
        sel = ~M_mss_sel;
        sel[1+2-:3] = 3'h7;
        if (button[4+0-:1]) begin
          M_changemode_d = S0_changemode;
        end
      end
      default: begin
        M_mss_values = 16'h0000;
        seg = 8'h00;
        sel = 11'h457;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_changemode_q <= 1'h0;
    end else begin
      M_changemode_q <= M_changemode_d;
    end
  end
  
endmodule
