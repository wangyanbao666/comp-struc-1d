/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_test_4 (
    input clk,
    input rst,
    output reg [3:0] seg,
    output reg [2:0] zvn_out,
    input iodip,
    output reg [15:0] out_true,
    output reg [15:0] out_calc
  );
  
  
  
  wire [1-1:0] M_slowclock_value;
  counter_9 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  
  localparam S0_fsm_t = 5'd0;
  localparam S1_fsm_t = 5'd1;
  localparam S2_fsm_t = 5'd2;
  localparam S3_fsm_t = 5'd3;
  localparam S4_fsm_t = 5'd4;
  localparam S5_fsm_t = 5'd5;
  localparam S6_fsm_t = 5'd6;
  localparam S7_fsm_t = 5'd7;
  localparam S8_fsm_t = 5'd8;
  localparam S9_fsm_t = 5'd9;
  localparam S10_fsm_t = 5'd10;
  localparam S11_fsm_t = 5'd11;
  localparam S12_fsm_t = 5'd12;
  localparam S13_fsm_t = 5'd13;
  localparam S14_fsm_t = 5'd14;
  localparam S15_fsm_t = 5'd15;
  localparam S16_fsm_t = 5'd16;
  localparam S17_fsm_t = 5'd17;
  localparam S18_fsm_t = 5'd18;
  localparam S19_fsm_t = 5'd19;
  localparam S20_fsm_t = 5'd20;
  
  reg [4:0] M_fsm_t_d, M_fsm_t_q = S0_fsm_t;
  
  wire [16-1:0] M_r_outA;
  wire [16-1:0] M_r_outB;
  wire [6-1:0] M_r_alufn;
  wire [3-1:0] M_r_outZVN;
  wire [16-1:0] M_r_out;
  reg [5-1:0] M_r_address;
  rom_10 r (
    .address(M_r_address),
    .outA(M_r_outA),
    .outB(M_r_outB),
    .alufn(M_r_alufn),
    .outZVN(M_r_outZVN),
    .out(M_r_out)
  );
  
  wire [16-1:0] M_aluUnit_out;
  wire [1-1:0] M_aluUnit_z;
  wire [1-1:0] M_aluUnit_v;
  wire [1-1:0] M_aluUnit_n;
  reg [16-1:0] M_aluUnit_a;
  reg [16-1:0] M_aluUnit_b;
  reg [6-1:0] M_aluUnit_alufn;
  alu_8 aluUnit (
    .a(M_aluUnit_a),
    .b(M_aluUnit_b),
    .alufn(M_aluUnit_alufn),
    .out(M_aluUnit_out),
    .z(M_aluUnit_z),
    .v(M_aluUnit_v),
    .n(M_aluUnit_n)
  );
  
  reg [4:0] address;
  
  reg [15:0] computed;
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  reg [2:0] zvn;
  
  reg [15:0] o;
  
  always @* begin
    M_fsm_t_d = M_fsm_t_q;
    
    address = 5'h00;
    M_r_address = address;
    a = M_r_outA;
    b = M_r_outB;
    o = M_r_out;
    zvn[0+0-:1] = M_aluUnit_z;
    zvn[1+0-:1] = M_aluUnit_v;
    zvn[2+0-:1] = M_aluUnit_n;
    zvn_out = zvn;
    alufn = M_r_alufn;
    M_aluUnit_a = a;
    M_aluUnit_b = b;
    M_aluUnit_alufn = alufn;
    computed = M_aluUnit_out;
    out_calc = computed;
    out_true = o;
    
    case (M_fsm_t_q)
      S0_fsm_t: begin
        M_r_address = 5'h00;
        M_fsm_t_d = S1_fsm_t;
      end
      S1_fsm_t: begin
        M_r_address = 5'h01;
        M_fsm_t_d = S2_fsm_t;
      end
      S2_fsm_t: begin
        M_r_address = 5'h02;
        M_fsm_t_d = S3_fsm_t;
      end
      S3_fsm_t: begin
        M_r_address = 5'h03;
        M_fsm_t_d = S4_fsm_t;
      end
      S4_fsm_t: begin
        M_r_address = 5'h04;
        M_fsm_t_d = S5_fsm_t;
      end
      S5_fsm_t: begin
        M_r_address = 5'h05;
        M_fsm_t_d = S6_fsm_t;
      end
      S6_fsm_t: begin
        M_r_address = 5'h06;
        M_fsm_t_d = S7_fsm_t;
      end
      S7_fsm_t: begin
        M_r_address = 5'h07;
        M_fsm_t_d = S8_fsm_t;
      end
      S8_fsm_t: begin
        M_r_address = 5'h08;
        M_fsm_t_d = S9_fsm_t;
      end
      S9_fsm_t: begin
        M_r_address = 5'h09;
        M_fsm_t_d = S10_fsm_t;
      end
      S10_fsm_t: begin
        M_r_address = 5'h0a;
        M_fsm_t_d = S11_fsm_t;
      end
      S11_fsm_t: begin
        M_r_address = 5'h0b;
        M_fsm_t_d = S12_fsm_t;
      end
      S12_fsm_t: begin
        M_r_address = 5'h0c;
        M_fsm_t_d = S13_fsm_t;
      end
      S13_fsm_t: begin
        M_r_address = 5'h0d;
        M_fsm_t_d = S14_fsm_t;
      end
      S14_fsm_t: begin
        M_r_address = 5'h0e;
        M_fsm_t_d = S15_fsm_t;
      end
      S15_fsm_t: begin
        M_r_address = 5'h0f;
        M_fsm_t_d = S16_fsm_t;
      end
      S16_fsm_t: begin
        M_r_address = 5'h10;
        M_fsm_t_d = S17_fsm_t;
      end
      S17_fsm_t: begin
        M_r_address = 5'h11;
        M_fsm_t_d = S18_fsm_t;
      end
      S18_fsm_t: begin
        M_r_address = 5'h12;
        M_fsm_t_d = S19_fsm_t;
      end
      S19_fsm_t: begin
        M_r_address = 5'h13;
        M_fsm_t_d = S20_fsm_t;
      end
      S20_fsm_t: begin
        M_r_address = 5'h14;
        M_fsm_t_d = S0_fsm_t;
      end
    endcase
    if (iodip == 1'h1) begin
      o[0+0-:1] = ~o[0+0-:1];
    end
    if (o == computed) begin
      seg = 4'h1;
    end else begin
      seg = 4'h0;
    end
  end
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_fsm_t_q <= 1'h0;
    end else begin
      M_fsm_t_q <= M_fsm_t_d;
    end
  end
  
endmodule
