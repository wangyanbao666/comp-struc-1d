/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_beta_1 (
    input clk,
    input rst,
    input [8:0] play_button,
    input clear_button,
    input pass_button,
    input reset_button,
    input [15:0] time,
    output reg [15:0] current_state,
    output reg [15:0] pattern,
    output reg [7:0] score
  );
  
  
  
  reg [15:0] inputAlu_a;
  
  reg [15:0] inputAlu_b;
  
  reg increase;
  
  reg [15:0] wr_data;
  
  reg M_z_d, M_z_q = 1'h0;
  
  reg [2:0] M_address1_d, M_address1_q = 1'h0;
  
  wire [16-1:0] M_game_alu_out;
  wire [1-1:0] M_game_alu_z;
  wire [1-1:0] M_game_alu_v;
  wire [1-1:0] M_game_alu_n;
  reg [16-1:0] M_game_alu_a;
  reg [16-1:0] M_game_alu_b;
  reg [6-1:0] M_game_alu_alufn;
  alu_3 game_alu (
    .a(M_game_alu_a),
    .b(M_game_alu_b),
    .alufn(M_game_alu_alufn),
    .out(M_game_alu_out),
    .z(M_game_alu_z),
    .v(M_game_alu_v),
    .n(M_game_alu_n)
  );
  
  wire [1-1:0] M_game_controlunit_we;
  wire [2-1:0] M_game_controlunit_wdsel;
  wire [3-1:0] M_game_controlunit_asel;
  wire [3-1:0] M_game_controlunit_bsel;
  wire [6-1:0] M_game_controlunit_alufn;
  wire [4-1:0] M_game_controlunit_wr;
  wire [16-1:0] M_game_controlunit_button_sig;
  wire [1-1:0] M_game_controlunit_increase;
  reg [9-1:0] M_game_controlunit_button;
  reg [1-1:0] M_game_controlunit_clear_button;
  reg [1-1:0] M_game_controlunit_pass_button;
  reg [1-1:0] M_game_controlunit_reset_button;
  reg [1-1:0] M_game_controlunit_z;
  reg [16-1:0] M_game_controlunit_time;
  game_cu_4 game_controlunit (
    .clk(clk),
    .rst(rst),
    .button(M_game_controlunit_button),
    .clear_button(M_game_controlunit_clear_button),
    .pass_button(M_game_controlunit_pass_button),
    .reset_button(M_game_controlunit_reset_button),
    .z(M_game_controlunit_z),
    .time(M_game_controlunit_time),
    .we(M_game_controlunit_we),
    .wdsel(M_game_controlunit_wdsel),
    .asel(M_game_controlunit_asel),
    .bsel(M_game_controlunit_bsel),
    .alufn(M_game_controlunit_alufn),
    .wr(M_game_controlunit_wr),
    .button_sig(M_game_controlunit_button_sig),
    .increase(M_game_controlunit_increase)
  );
  
  wire [16-1:0] M_regfile_current_state;
  wire [16-1:0] M_regfile_pattern;
  wire [16-1:0] M_regfile_score;
  wire [16-1:0] M_regfile_level;
  reg [16-1:0] M_regfile_wr_data;
  reg [4-1:0] M_regfile_wrsel;
  reg [1-1:0] M_regfile_we;
  game_regfile_5 regfile (
    .clk(clk),
    .rst(rst),
    .wr_data(M_regfile_wr_data),
    .wrsel(M_regfile_wrsel),
    .we(M_regfile_we),
    .current_state(M_regfile_current_state),
    .pattern(M_regfile_pattern),
    .score(M_regfile_score),
    .level(M_regfile_level)
  );
  
  wire [32-1:0] M_rand_num_num;
  reg [1-1:0] M_rand_num_next;
  pn_gen_6 rand_num (
    .clk(clk),
    .rst(rst),
    .seed(32'h00000100),
    .next(M_rand_num_next),
    .num(M_rand_num_num)
  );
  
  wire [16-1:0] M_patterns_out;
  reg [3-1:0] M_patterns_address1;
  reg [16-1:0] M_patterns_address2;
  pattern_rom_7 patterns (
    .address1(M_patterns_address1),
    .address2(M_patterns_address2),
    .out(M_patterns_out)
  );
  
  wire [8-1:0] M_increasor_out;
  reg [1-1:0] M_increasor_increase;
  increase_score_8 increasor (
    .clk(clk),
    .rst(rst),
    .increase(M_increasor_increase),
    .out(M_increasor_out)
  );
  
  wire [(4'h9+0)-1:0] M_playerbuttoncond_out;
  reg [(4'h9+0)-1:0] M_playerbuttoncond_in;
  
  genvar GEN_playerbuttoncond0;
  generate
  for (GEN_playerbuttoncond0=0;GEN_playerbuttoncond0<4'h9;GEN_playerbuttoncond0=GEN_playerbuttoncond0+1) begin: playerbuttoncond_gen_0
    button_conditioner_9 playerbuttoncond (
      .clk(clk),
      .in(M_playerbuttoncond_in[GEN_playerbuttoncond0*(1)+(1)-1-:(1)]),
      .out(M_playerbuttoncond_out[GEN_playerbuttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'h9+0)-1:0] M_playerbuttondetector_out;
  reg [(4'h9+0)-1:0] M_playerbuttondetector_in;
  
  genvar GEN_playerbuttondetector0;
  generate
  for (GEN_playerbuttondetector0=0;GEN_playerbuttondetector0<4'h9;GEN_playerbuttondetector0=GEN_playerbuttondetector0+1) begin: playerbuttondetector_gen_0
    edge_detector_10 playerbuttondetector (
      .clk(clk),
      .in(M_playerbuttondetector_in[GEN_playerbuttondetector0*(1)+(1)-1-:(1)]),
      .out(M_playerbuttondetector_out[GEN_playerbuttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [1-1:0] M_clearbuttoncond_out;
  reg [1-1:0] M_clearbuttoncond_in;
  button_conditioner_9 clearbuttoncond (
    .clk(clk),
    .in(M_clearbuttoncond_in),
    .out(M_clearbuttoncond_out)
  );
  
  wire [1-1:0] M_clearbuttondetector_out;
  reg [1-1:0] M_clearbuttondetector_in;
  edge_detector_10 clearbuttondetector (
    .clk(clk),
    .in(M_clearbuttondetector_in),
    .out(M_clearbuttondetector_out)
  );
  
  wire [1-1:0] M_passbuttoncond_out;
  reg [1-1:0] M_passbuttoncond_in;
  button_conditioner_9 passbuttoncond (
    .clk(clk),
    .in(M_passbuttoncond_in),
    .out(M_passbuttoncond_out)
  );
  
  wire [1-1:0] M_passbuttondetector_out;
  reg [1-1:0] M_passbuttondetector_in;
  edge_detector_10 passbuttondetector (
    .clk(clk),
    .in(M_passbuttondetector_in),
    .out(M_passbuttondetector_out)
  );
  
  wire [1-1:0] M_resetbuttoncond_out;
  reg [1-1:0] M_resetbuttoncond_in;
  button_conditioner_9 resetbuttoncond (
    .clk(clk),
    .in(M_resetbuttoncond_in),
    .out(M_resetbuttoncond_out)
  );
  
  wire [1-1:0] M_resetbuttondetector_out;
  reg [1-1:0] M_resetbuttondetector_in;
  edge_detector_10 resetbuttondetector (
    .clk(clk),
    .in(M_resetbuttondetector_in),
    .out(M_resetbuttondetector_out)
  );
  
  always @* begin
    M_address1_d = M_address1_q;
    M_z_d = M_z_q;
    
    M_rand_num_next = 1'h0;
    if (reset_button) begin
      M_rand_num_next = 1'h1;
      M_address1_d = M_rand_num_num[0+2-:3];
    end else begin
      M_address1_d = M_address1_q;
    end
    M_playerbuttoncond_in = play_button;
    M_playerbuttondetector_in = M_playerbuttoncond_out;
    M_clearbuttoncond_in = clear_button;
    M_clearbuttondetector_in = M_clearbuttoncond_out;
    M_passbuttoncond_in = pass_button;
    M_passbuttondetector_in = M_passbuttoncond_out;
    M_resetbuttoncond_in = reset_button;
    M_resetbuttondetector_in = M_resetbuttoncond_out;
    M_game_controlunit_button = M_playerbuttondetector_out;
    M_game_controlunit_clear_button = M_clearbuttondetector_out;
    M_game_controlunit_reset_button = M_resetbuttondetector_out;
    M_game_controlunit_pass_button = M_passbuttondetector_out;
    M_game_controlunit_z = M_z_q;
    M_game_controlunit_time = time;
    M_regfile_wr_data = 16'h0000;
    M_regfile_wrsel = M_game_controlunit_wr;
    M_regfile_we = M_game_controlunit_we;
    M_patterns_address1 = M_address1_q;
    M_patterns_address2 = M_regfile_level;
    increase = M_game_controlunit_increase;
    M_increasor_increase = increase;
    
    case (M_game_controlunit_asel)
      3'h0: begin
        inputAlu_a = M_regfile_pattern;
      end
      3'h1: begin
        inputAlu_a = M_game_controlunit_button_sig;
      end
      3'h3: begin
        inputAlu_a = 3'h6;
      end
      3'h4: begin
        inputAlu_a = 1'h1;
      end
      default: begin
        inputAlu_a = 16'h0000;
      end
    endcase
    
    case (M_game_controlunit_bsel)
      3'h0: begin
        inputAlu_b = M_regfile_current_state;
      end
      3'h1: begin
        inputAlu_b = M_regfile_level;
      end
      3'h2: begin
        inputAlu_b = M_regfile_score;
      end
      default: begin
        inputAlu_b = 16'h0000;
      end
    endcase
    
    case (M_game_controlunit_wdsel)
      2'h0: begin
        wr_data = M_game_alu_out;
      end
      2'h1: begin
        wr_data = 16'h0000;
      end
      2'h2: begin
        wr_data = M_patterns_out;
      end
      default: begin
        wr_data = 16'h0000;
      end
    endcase
    M_game_alu_a = inputAlu_a;
    M_game_alu_b = inputAlu_b;
    M_game_alu_alufn = M_game_controlunit_alufn;
    M_z_d = M_game_alu_z;
    M_regfile_wr_data = wr_data;
    score = M_increasor_out;
    current_state = M_regfile_current_state;
    pattern = M_regfile_pattern;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_address1_q <= 1'h0;
    end else begin
      M_address1_q <= M_address1_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_z_q <= 1'h0;
    end else begin
      M_z_q <= M_z_d;
    end
  end
  
endmodule
