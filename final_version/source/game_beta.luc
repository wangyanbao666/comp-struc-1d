module game_beta (
    input clk,  // clock
    input rst,  // reset
    input play_button[9],
    input clear_button,
    input pass_button,
    input reset_edge,
    input t[4][4],
    output current_state[16],
    output pattern[16],
    output score[4],
    output time_show,
    input randnum_val[32],
    output timer_froze
    

  ) {
  counter counter1(#SIZE(1),#DIV(25),.clk(clk),.rst(rst));
  edge_detector edge_detector1(#RISE(1), #FALL(0),.clk(clk));
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  sig increase;
  sig wr_data[16];
  dff z(#INIT(0),.clk(clk),.rst(rst));
 
  alu game_alu;
  game_controlUnit game_controlunit(.clk(clk),.rst(rst));
  game_regfile regfile(.clk(clk),.rst(rst));
  
  //pn_gen randnum(.clk(clk), .rst(rst));
  pattern_rom patterns;
  
  increase_score increasor(.clk(clk),.rst(rst));
  
  button_conditioner playerbuttoncond[9](.clk(clk));
  edge_detector playerbuttondetector[9](#RISE(0), #FALL(1),.clk(clk)); 
  button_conditioner clearbuttoncond(.clk(clk));
  edge_detector clearbuttondetector(#RISE(1), #FALL(0),.clk(clk)); 
  button_conditioner passbuttoncond(.clk(clk));
  edge_detector passbuttondetector(#RISE(1), #FALL(0),.clk(clk));
  
  always {
    //randnum.seed = 32hABCDFFFF;
    edge_detector1.in = counter1.value;
    game_controlunit.toggle = edge_detector1.out;
    
   
    playerbuttoncond.in = play_button[8:0];
    playerbuttondetector.in = playerbuttoncond.out;
    clearbuttoncond.in = clear_button;
    clearbuttondetector.in = clearbuttoncond.out;
    passbuttoncond.in = pass_button;
    passbuttondetector.in = passbuttoncond.out;
    
//    randnum.next = reset_edge;
//    randnum_val = randnum.num;
    
    //input for cu
    game_controlunit.button = playerbuttondetector.out;
    game_controlunit.clear_button = clearbuttondetector.out;
    game_controlunit.reset_button = reset_edge;
    game_controlunit.pass_button = passbuttondetector.out;
    game_controlunit.z = z.q;
    game_controlunit.t = t;
    
    //input for regfile
    //regfile.wr_data = 16b0;
    regfile.wrsel = game_controlunit.wr;
    //regfile.wrsel = 16b0;
    regfile.we = game_controlunit.we;
    //regfile.we = 0;
    
    //input for rom
    patterns.addressr = randnum_val[2:0];
    patterns.addressl = regfile.level;
    
    //input for increasor 
    increase = game_controlunit.increase;
    increasor.increase = increase;
    increasor.reset = reset_edge;
    
    
    case (game_controlunit.asel){
      b000: inputAlu_a = regfile.pattern;
      b001: inputAlu_a = game_controlunit.button_sig;
      b011: inputAlu_a = 16b111; // num of patterns
      b100: inputAlu_a = 16b1;
      default: inputAlu_a = 16b0;
      }
    
    case (game_controlunit.bsel){
      b000: inputAlu_b = regfile.current_state;
      b001: inputAlu_b = regfile.level;
      b010: inputAlu_b = regfile.score;
      b011: inputAlu_b = regfile.score-1;
      default: inputAlu_b = 16b1;
      }
    

    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn = game_controlunit.alufn;
    z.d = game_alu.z;
    
   case (game_controlunit.wdsel){
      b000: wr_data = game_alu.out;
      b001: wr_data = 16b0;
      b010: wr_data = patterns.out;
      b011: wr_data = 16b101010101;
      b100: wr_data = 16b10101010;
      b101: wr_data = 16b111111111;
      b110: wr_data = 16b100000000;
      b111: wr_data = 16b10000000;
      b1000: wr_data = 16b1000000;
      b1001: wr_data = 16b100000;
      b1010: wr_data = 16b10000;
      b1011: wr_data = 16b1000;
      b1100: wr_data = 16b100;
      b1101: wr_data = 16b10;
      b1110: wr_data = 16b1;
      default: wr_data = 16b0;
      }
    
    regfile.wr_data = wr_data;
    
    score = increasor.out;
    current_state = regfile.current_state;
    pattern = regfile.pattern;
    time_show = game_controlunit.time_show;
    timer_froze = game_controlunit.time_froze;
  }
}
