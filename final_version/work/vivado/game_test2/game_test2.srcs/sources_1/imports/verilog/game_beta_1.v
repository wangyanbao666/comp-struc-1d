/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_beta_1 (
    input clk,
    input rst,
    input [8:0] play_button,
    input clear_button,
    input pass_button,
    input reset_edge,
    input [15:0] t,
    output reg [15:0] current_state,
    output reg [15:0] pattern,
    output reg [3:0] score,
    output reg time_show,
    input [31:0] randnum_val,
    output reg timer_froze
  );
  
  
  
  wire [1-1:0] M_counter1_value;
  counter_11 counter1 (
    .clk(clk),
    .rst(rst),
    .value(M_counter1_value)
  );
  
  wire [1-1:0] M_edge_detector1_out;
  reg [1-1:0] M_edge_detector1_in;
  edge_detector_4 edge_detector1 (
    .clk(clk),
    .in(M_edge_detector1_in),
    .out(M_edge_detector1_out)
  );
  
  reg [15:0] inputAlu_a;
  
  reg [15:0] inputAlu_b;
  
  reg increase;
  
  reg [15:0] wr_data;
  
  reg M_z_d, M_z_q = 1'h0;
  
  wire [16-1:0] M_game_alu_out;
  wire [1-1:0] M_game_alu_z;
  wire [1-1:0] M_game_alu_v;
  wire [1-1:0] M_game_alu_n;
  reg [16-1:0] M_game_alu_a;
  reg [16-1:0] M_game_alu_b;
  reg [6-1:0] M_game_alu_alufn;
  alu_12 game_alu (
    .a(M_game_alu_a),
    .b(M_game_alu_b),
    .alufn(M_game_alu_alufn),
    .out(M_game_alu_out),
    .z(M_game_alu_z),
    .v(M_game_alu_v),
    .n(M_game_alu_n)
  );
  
  wire [1-1:0] M_game_controlunit_we;
  wire [4-1:0] M_game_controlunit_wdsel;
  wire [3-1:0] M_game_controlunit_asel;
  wire [3-1:0] M_game_controlunit_bsel;
  wire [6-1:0] M_game_controlunit_alufn;
  wire [16-1:0] M_game_controlunit_wr;
  wire [16-1:0] M_game_controlunit_button_sig;
  wire [1-1:0] M_game_controlunit_increase;
  wire [1-1:0] M_game_controlunit_time_show;
  wire [1-1:0] M_game_controlunit_time_froze;
  reg [9-1:0] M_game_controlunit_button;
  reg [1-1:0] M_game_controlunit_clear_button;
  reg [1-1:0] M_game_controlunit_pass_button;
  reg [1-1:0] M_game_controlunit_reset_button;
  reg [1-1:0] M_game_controlunit_z;
  reg [16-1:0] M_game_controlunit_t;
  reg [1-1:0] M_game_controlunit_toggle;
  game_controlUnit_13 game_controlunit (
    .clk(clk),
    .rst(rst),
    .button(M_game_controlunit_button),
    .clear_button(M_game_controlunit_clear_button),
    .pass_button(M_game_controlunit_pass_button),
    .reset_button(M_game_controlunit_reset_button),
    .z(M_game_controlunit_z),
    .t(M_game_controlunit_t),
    .toggle(M_game_controlunit_toggle),
    .we(M_game_controlunit_we),
    .wdsel(M_game_controlunit_wdsel),
    .asel(M_game_controlunit_asel),
    .bsel(M_game_controlunit_bsel),
    .alufn(M_game_controlunit_alufn),
    .wr(M_game_controlunit_wr),
    .button_sig(M_game_controlunit_button_sig),
    .increase(M_game_controlunit_increase),
    .time_show(M_game_controlunit_time_show),
    .time_froze(M_game_controlunit_time_froze)
  );
  
  wire [16-1:0] M_regfile_current_state;
  wire [16-1:0] M_regfile_pattern;
  wire [16-1:0] M_regfile_score;
  wire [16-1:0] M_regfile_level;
  reg [16-1:0] M_regfile_wr_data;
  reg [16-1:0] M_regfile_wrsel;
  reg [1-1:0] M_regfile_we;
  game_regfile_14 regfile (
    .clk(clk),
    .rst(rst),
    .wr_data(M_regfile_wr_data),
    .wrsel(M_regfile_wrsel),
    .we(M_regfile_we),
    .current_state(M_regfile_current_state),
    .pattern(M_regfile_pattern),
    .score(M_regfile_score),
    .level(M_regfile_level)
  );
  
  wire [16-1:0] M_patterns_out;
  reg [3-1:0] M_patterns_addressr;
  reg [16-1:0] M_patterns_addressl;
  pattern_rom_15 patterns (
    .addressr(M_patterns_addressr),
    .addressl(M_patterns_addressl),
    .out(M_patterns_out)
  );
  
  wire [4-1:0] M_increasor_out;
  reg [1-1:0] M_increasor_reset;
  reg [1-1:0] M_increasor_increase;
  increase_score_16 increasor (
    .clk(clk),
    .rst(rst),
    .reset(M_increasor_reset),
    .increase(M_increasor_increase),
    .out(M_increasor_out)
  );
  
  wire [(4'h9+0)-1:0] M_playerbuttoncond_out;
  reg [(4'h9+0)-1:0] M_playerbuttoncond_in;
  
  genvar GEN_playerbuttoncond0;
  generate
  for (GEN_playerbuttoncond0=0;GEN_playerbuttoncond0<4'h9;GEN_playerbuttoncond0=GEN_playerbuttoncond0+1) begin: playerbuttoncond_gen_0
    button_conditioner_10 playerbuttoncond (
      .clk(clk),
      .in(M_playerbuttoncond_in[GEN_playerbuttoncond0*(1)+(1)-1-:(1)]),
      .out(M_playerbuttoncond_out[GEN_playerbuttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'h9+0)-1:0] M_playerbuttondetector_out;
  reg [(4'h9+0)-1:0] M_playerbuttondetector_in;
  
  genvar GEN_playerbuttondetector0;
  generate
  for (GEN_playerbuttondetector0=0;GEN_playerbuttondetector0<4'h9;GEN_playerbuttondetector0=GEN_playerbuttondetector0+1) begin: playerbuttondetector_gen_0
    edge_detector_9 playerbuttondetector (
      .clk(clk),
      .in(M_playerbuttondetector_in[GEN_playerbuttondetector0*(1)+(1)-1-:(1)]),
      .out(M_playerbuttondetector_out[GEN_playerbuttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [1-1:0] M_clearbuttoncond_out;
  reg [1-1:0] M_clearbuttoncond_in;
  button_conditioner_10 clearbuttoncond (
    .clk(clk),
    .in(M_clearbuttoncond_in),
    .out(M_clearbuttoncond_out)
  );
  
  wire [1-1:0] M_clearbuttondetector_out;
  reg [1-1:0] M_clearbuttondetector_in;
  edge_detector_4 clearbuttondetector (
    .clk(clk),
    .in(M_clearbuttondetector_in),
    .out(M_clearbuttondetector_out)
  );
  
  wire [1-1:0] M_passbuttoncond_out;
  reg [1-1:0] M_passbuttoncond_in;
  button_conditioner_10 passbuttoncond (
    .clk(clk),
    .in(M_passbuttoncond_in),
    .out(M_passbuttoncond_out)
  );
  
  wire [1-1:0] M_passbuttondetector_out;
  reg [1-1:0] M_passbuttondetector_in;
  edge_detector_4 passbuttondetector (
    .clk(clk),
    .in(M_passbuttondetector_in),
    .out(M_passbuttondetector_out)
  );
  
  always @* begin
    M_z_d = M_z_q;
    
    M_edge_detector1_in = M_counter1_value;
    M_game_controlunit_toggle = M_edge_detector1_out;
    M_playerbuttoncond_in = play_button;
    M_playerbuttondetector_in = M_playerbuttoncond_out;
    M_clearbuttoncond_in = clear_button;
    M_clearbuttondetector_in = M_clearbuttoncond_out;
    M_passbuttoncond_in = pass_button;
    M_passbuttondetector_in = M_passbuttoncond_out;
    M_game_controlunit_button = M_playerbuttondetector_out;
    M_game_controlunit_clear_button = M_clearbuttondetector_out;
    M_game_controlunit_reset_button = reset_edge;
    M_game_controlunit_pass_button = M_passbuttondetector_out;
    M_game_controlunit_z = M_z_q;
    M_game_controlunit_t = t;
    M_regfile_wrsel = M_game_controlunit_wr;
    M_regfile_we = M_game_controlunit_we;
    M_patterns_addressr = randnum_val[0+2-:3];
    M_patterns_addressl = M_regfile_level;
    increase = M_game_controlunit_increase;
    M_increasor_increase = increase;
    M_increasor_reset = reset_edge;
    
    case (M_game_controlunit_asel)
      3'h0: begin
        inputAlu_a = M_regfile_pattern;
      end
      3'h1: begin
        inputAlu_a = M_game_controlunit_button_sig;
      end
      3'h3: begin
        inputAlu_a = 16'h0007;
      end
      3'h4: begin
        inputAlu_a = 16'h0001;
      end
      default: begin
        inputAlu_a = 16'h0000;
      end
    endcase
    
    case (M_game_controlunit_bsel)
      3'h0: begin
        inputAlu_b = M_regfile_current_state;
      end
      3'h1: begin
        inputAlu_b = M_regfile_level;
      end
      3'h2: begin
        inputAlu_b = M_regfile_score;
      end
      3'h3: begin
        inputAlu_b = M_regfile_score - 1'h1;
      end
      default: begin
        inputAlu_b = 16'h0001;
      end
    endcase
    M_game_alu_a = inputAlu_a;
    M_game_alu_b = inputAlu_b;
    M_game_alu_alufn = M_game_controlunit_alufn;
    M_z_d = M_game_alu_z;
    
    case (M_game_controlunit_wdsel)
      3'h0: begin
        wr_data = M_game_alu_out;
      end
      3'h1: begin
        wr_data = 16'h0000;
      end
      3'h2: begin
        wr_data = M_patterns_out;
      end
      3'h3: begin
        wr_data = 16'h0155;
      end
      3'h4: begin
        wr_data = 16'h00aa;
      end
      3'h5: begin
        wr_data = 16'h01ff;
      end
      3'h6: begin
        wr_data = 16'h0100;
      end
      3'h7: begin
        wr_data = 16'h0080;
      end
      4'h8: begin
        wr_data = 16'h0040;
      end
      4'h9: begin
        wr_data = 16'h0020;
      end
      4'ha: begin
        wr_data = 16'h0010;
      end
      4'hb: begin
        wr_data = 16'h0008;
      end
      4'hc: begin
        wr_data = 16'h0004;
      end
      4'hd: begin
        wr_data = 16'h0002;
      end
      4'he: begin
        wr_data = 16'h0001;
      end
      default: begin
        wr_data = 16'h0000;
      end
    endcase
    M_regfile_wr_data = wr_data;
    score = M_increasor_out;
    current_state = M_regfile_current_state;
    pattern = M_regfile_pattern;
    time_show = M_game_controlunit_time_show;
    timer_froze = M_game_controlunit_time_froze;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_z_q <= 1'h0;
    end else begin
      M_z_q <= M_z_d;
    end
  end
  
endmodule
