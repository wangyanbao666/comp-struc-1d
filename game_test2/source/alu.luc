module alu (
    input a[16],  // clock
    input b[16],  // reset
    input alufn[6],
    output out[16],
    output z,
    output v,
    output n
  ) {
  sig zi,vi,ni;
  adder ad;
  comparator cmp;
  boolean boole;
  shifter shift;
  flip flipper;
  always {
  //adder
    ad.a=a;
    ad.b=b;
    ad.alufn=alufn;
    zi=ad.z;
    vi=ad.v;
    ni=ad.n;
    
    z=zi;
    v=vi;
    n=ni;
    
  //comparator
    cmp.alufn=alufn;
    cmp.v=vi;
    cmp.z=zi;
    cmp.n=ni;
    
  //boolean
    boole.alufn=alufn;
    boole.a=a;
    boole.b=b;
    
  //shifter
    shift.alufn=alufn;
    shift.a=a;
    shift.b=b[3:0];
    
  //flipper alufn=111111
    flipper.c=a;
    flipper.current_state=b;
    
    case(alufn[5:4]){
      b00 : out = ad.s;
      b01 : out = boole.s;
      b10 : out = shift.s;
      b11 : out = cmp.s;
      default: out = 16b0;
      }
    if (alufn==b111111){
      out=flipper.s;
      }
    if (alufn==b000010){
      out=a*b;
      }
    
  }
}
