/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    input usb_rx,
    output reg usb_tx,
    input [8:0] button,
    input clear_button,
    input pass_button,
    input reset_button,
    output reg [8:0] player,
    output reg [8:0] pattern,
    output reg [7:0] led,
    output reg debug_regfile
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_beta_current_state;
  wire [16-1:0] M_beta_pattern;
  wire [8-1:0] M_beta_score;
  wire [1-1:0] M_beta_debug_light;
  reg [9-1:0] M_beta_play_button;
  reg [1-1:0] M_beta_clear_button;
  reg [1-1:0] M_beta_pass_button;
  reg [1-1:0] M_beta_reset_button;
  reg [16-1:0] M_beta_t;
  game_beta_1 beta (
    .clk(clk),
    .rst(clk),
    .play_button(M_beta_play_button),
    .clear_button(M_beta_clear_button),
    .pass_button(M_beta_pass_button),
    .reset_button(M_beta_reset_button),
    .t(M_beta_t),
    .current_state(M_beta_current_state),
    .pattern(M_beta_pattern),
    .score(M_beta_score),
    .debug_light(M_beta_debug_light)
  );
  
  wire [16-1:0] M_timer_out;
  reg [1-1:0] M_timer_reset_button;
  time_countdown_2 timer (
    .clk(clk),
    .rst(rst),
    .reset_button(M_timer_reset_button),
    .out(M_timer_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    usb_tx = usb_rx;
    M_timer_reset_button = reset_button;
    M_beta_play_button = button;
    M_beta_pass_button = pass_button;
    M_beta_clear_button = clear_button;
    M_beta_reset_button = reset_button;
    M_beta_t = M_timer_out;
    player = M_beta_current_state[0+8-:9];
    pattern = M_beta_pattern[0+8-:9];
    debug_regfile = M_beta_debug_light;
  end
endmodule
